digraph {
	node [shape=rect]
	done [label = "done"]
	dtm_hare_state_machines [label = "dtm hare state machines (132d)"];
	dtm_log_interface [label = "dtm log interface (?)"];
	dtm_log [label = "dtm log (132d)"];
	dtm_log_pruning [label = "dtm log pruning (132d)"];
	dtm_complex_pruning [label = "dtm complex pruning (60d)"];
	dtm_log_interface [label = "dtm log interface (?)"];
	dtm_log_replay [label = "dtm log replay (30d)"];
	dtm_log_replay_complex [label = "dtm log replay complex (30d)"];
	dtm_replay_throttle [label = "dtm replay throttle (30d)"];
	dtm_k8s_env [label = "dtm k8s env (65d)"];
	dtm_clock_skew [label = "dtm clock skew (10d)"];
	dtm_telemetry [label = "dtm telemetry (90d)"];
	dtm_hare_int [label = "dtm hare integration (?)"];
	dtm_failed_int [label = "dtm motr FAILED state integration (22d)", fillcolor = "red"];
	dtm_configuration_update [label = "dtm configuration update (60d)"];
	dtm_cortx_int0 [label = "dtm cortx integration (?)"];
	dtm_dix_spare [label = "dtm dix spares integration (22d)"];
	dtm_cortx_int0 [label = "dtm cortx integration 0\nsingle process restart (?)", style="filled", fillcolor = "red"];
	dtm_cortx_int1 [label = "dtm cortx integration 1\nmultiple process restarts (?)", style="filled", fillcolor = "red"];
	dtm_cortx_int2 [label = "dtm cortx integration 2\npermanent process failure (?)", style="filled", fillcolor = "red"];
	dtm_cortx_int3 [label = "dtm cortx integration 3\nremaining dtm features (?)", style="filled", fillcolor = "red"];
	hare_sns_repair_control  [label = "hare sns repair control (?)"];
	hare_dix_repair_control  [label = "hare dix repair control (?)"];
	sns_client [label = "sns with concurrent IO (?)"];
	dix_client [label = "dix with concurrent operations (?)"];
	dtm_timestamps [label = "dtm timestamps and tombstones (?)"];
	sns_repair [label = "sns repair (?)"];
	dix_repair [label = "dix repair (?)"];
	cm_throttle [label = "copy machine throttling (?)"];
	hare_fol_monitor [label = "monitor fol from hare (?)"];
	io_side_pver [label = "support side pool versions in IO (?)"];
	sns_transient_failure [label = "sns with transient node failure (?)"];
	sns_transient_failure_mult [label = "sns with multiple transient node failures (?)"];
	sns_permanent_failure [label = "sns with permanent node failure (?)"];
	sns_permanent_failure_mult [label = "sns with multiple permanent node failures (?)"];
	sns_network [label = "sns with network partitions (?)"];
	/* if !corvault */
	hare_device_replacement;
	ha_device_replacement;
	motr_device_replacement;
	sns_rebalance;
	dix_rebalance;
	sns_direct_rebalance;
	dix_direct_rebalance;
	/* endif */
	sns_int0 [label = "sns integration 0\nfailure free repair (?)", style="filled", fillcolor = "red"];
	sns_int1 [label = "sns integration 1\ntransient process failure (?)", style="filled", fillcolor = "red"];
	sns_int2 [label = "sns integration 2\nmultiple transient failures (?)", style="filled", fillcolor = "red"];
	sns_int3 [label = "sns integration 3\npermanent failures and throttling (?)", style="filled", fillcolor = "red"];
	sns_env [label = "sns testing environment (?)"];
	dix_transient_failure [label = "dix with transient node failure (?)"];
	dix_transient_failure_mult [label = "dix with multiple transient node failures (?)"];
	dix_permanent_failure [label = "dix with permanent node failure (?)"];
	dix_permanent_failure_mult [label = "dix with multiple permanent node failures (?)"];
	dix_network [label = "dix with network partitions (?)"];
	dix_int0 [label = "dix integration 0\nfailure free repair (?)", style="filled", fillcolor = "red"];
	dix_int1 [label = "dix integration 1\ntransient process failure (?)", style="filled", fillcolor = "red"];
	dix_int2 [label = "dix integration 2\nmultiple transient failures (?)", style="filled", fillcolor = "red"];
	dix_int3 [label = "dix integration 3\npermanent failures and throttling (?)", style="filled", fillcolor = "red"];
	dix_env [label = "dix testing environment (?)"];
	motr_performance [label = "motr performance (?)"];
	sns_performance [label = "sns performance (?)"];
	dix_performance [label = "dix performance (?)"];
	ha_resource_map [label = "HA: Resource Map"];
	ha_resource_health_framework [label = "HA: Resource Health Framework"];
	ha_cluster_health [label = "HA: Cluster level health state / status updates"];
	ha_rest [label = "HA: REST API for health status"];
	ha_health [label = "HA: site, rack, node, service and storage level health state"];
	ha_cluster_stop [label = "HA: Cluster stop"];
	ha_monitoring [label = "HA: Monitoring notification, Event processing"];
	ha_permanent_transient [label = "HA: failure is permanent or transient"];
	ha_health_update [label = "HA: Health view updates"];
	ha_event [label = "Hare: Failure event processing"];
	s3_seamless [label = "S3 server: Seamless Operations"];
	motr_degraded [label = "Motr: Switch to degraded mode"];
	s3_fail [label = "S3 server: Fail ongoing operation"];
	s3_bg_replay [label = "S3 server: Replay of operations (BG delete)"];
	csm_consul [label = "CSM: Move all config to consul"];
	csm_failover [label = "CSM: Failover to alternate server"];
	csm_validate [label = "CSM: stats and audit logs endpoints - validate statelessness"];
	cortx_liveness [label = "Cortx Services: Liveness probe"];
	ha_csm [label = "HA: Handle CSM machine id specific events"];
	ha_floating_pod [label = "HA pod: floating pod support"];
	ha_failover [label = "HA: Failover to alternate server"];
	ha_consul [label = "HA: Move all config to consul - floating node"];
	motr_dynamic_clients [label = "Motr+DTM: Needs dynamic client"];
	ha_aggregate [label = "HA: Aggregate notification"];
	sns_rebalance_or_direct [label = "Motr: Data SNS rebalance if spare is configured, else direct rebalance"];
	all_liveness [label = "All components: may need liveness  readiness probes for all components to allow for container event hooks"];
	ha_receive [label = "HA: Receive notifications from process monitors"];
	ntp_monitor [label = "Solution level monitor and restart NTP on physical servers"];
	clock_skew_monitor [label = "Clock skew monitoring with threshold for action"];
	di_scrub [label = "DI: Detection BG Scrub"];
	ha_scrub_event [label = "HA: Receive notifications from BG scrub monitors"];
	ha_scrub_hare [label = "HA: Send BG Notification to Hare"];
	di_recover [label = "DI: Recover identified corrupted data"];
	di_checksum [label = "DI: Checksum"];
	clock_int [label = "Clock/NTP integration", style="filled", fillcolor = "red"];
	dtm_log_interface -> dtm_log;
	dtm_log -> dtm_log_pruning;
	dtm_log_pruning -> dtm_complex_pruning;
	dtm_log_interface -> dtm_log_replay -> dtm_log_replay_complex;
	dtm_hare_state_machines -> dtm_hare_int;
	dtm_hare_state_machines -> dtm_failed_int;
	dtm_hare_int -> dtm_cortx_int0;
	dtm_k8s_env -> dtm_cortx_int0;
	dtm_log_replay -> dtm_cortx_int0;
	dtm_log -> dtm_cortx_int0;
	dtm_cortx_int0 -> dtm_cortx_int1;
	dtm_log_replay_complex -> dtm_cortx_int1;
	dtm_log_pruning -> dtm_cortx_int1;
	dtm_cortx_int1 -> dtm_cortx_int2;
	dtm_complex_pruning -> dtm_cortx_int2;
	dtm_failed_int  -> dtm_cortx_int2;
	dtm_cortx_int2 -> dtm_cortx_int3;
	dtm_telemetry -> dtm_cortx_int3;
	dtm_replay_throttle -> dtm_cortx_int3;
	dtm_configuration_update -> dtm_cortx_int3;
	dtm_clock_skew -> sns_client;
	dtm_timestamps -> sns_client;
	dtm_dix_spare -> dix_client;
	dtm_clock_skew -> dix_client;
	dtm_timestamps -> dix_client;
	dtm_telemetry -> hare_fol_monitor;
	dtm_cortx_int3 -> sns_int0;
	sns_repair -> sns_int0;
	hare_sns_repair_control -> sns_int0;
	sns_env -> sns_int0;
	sns_int0 -> sns_int1;
	sns_transient_failure -> sns_int1;
	sns_network -> sns_int1;
	sns_int1 -> sns_int2;
	sns_transient_failure_mult -> sns_int2;
	sns_client -> sns_int2;
	sns_int2 -> sns_int3;
	sns_permanent_failure -> sns_int3;
	sns_permanent_failure_mult -> sns_int3;
	cm_throttle -> sns_int3;
	sns_int3 -> sns_performance;
	dix_repair -> dix_int0;
	hare_dix_repair_control -> dix_int0;
	dtm_cortx_int3 -> dix_int0;
	dix_env -> dix_int0;
	dix_int0 -> dix_int1;
	dix_transient_failure -> dix_int1;
	dix_network -> dix_int1;
	dix_int1 -> dix_int2;
	dix_transient_failure_mult -> dix_int2;
	dix_client -> dix_int2;
	dix_int2 -> dix_int3;
	dix_permanent_failure -> dix_int3;
	dix_permanent_failure_mult -> dix_int3;
	dix_int3 -> dix_performance;
	cm_throttle -> dix_int3;
	dtm_cortx_int3 -> motr_performance;
	motr_performance -> done;
	motr_degraded -> sns_client;
	dtm_clock_skew -> clock_int;
	clock_skew_monitor -> clock_int;
	ntp_monitor -> clock_int;
	dix_performance -> done;
	sns_performance -> done;
}
